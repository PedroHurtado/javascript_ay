1. Rest Parameters
   
   //https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/rest_parameters

   function sum(initialValue,...args){
      return args.reduce((a,v)=>a+v,initialValue)
   }
   sum(1,2,3,4,5,6)

   //arguments->caracteristica de js

   1. limitaciones tienen que ser los ultimo de los argumentos
   2. No pueden haber más de rest parameter

2. Default Parameters
    function sum(a,b=4){
        return a+b
    }
    sum(5) //9
    sum(10) //14
    sum(5,3) //8

    limitaciones
    Tienen que ser los ultimos de la funcion

    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Default_parameters

3. Desectructuring->rest
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring
     1. Objectos
            const foo = {id:1,name:"Pedro", phone:45666666}
            const id = foo.id
            const name = foo.name

            const {id,name,...pepe} = foo
     2. Array
         const array=[[1,2,3,4,5,6]]
         const [a,b,...c] = array

         const a=array[0];const b=array[1]

    3. Desectructuring en funciones
        const foo = {id:1,name:"Pedro", phone:45666666} 
        function print({id,name,...rest}){
            console.log(`id-${id} name-${name}`)
        }
        print(foo)

4. Spread operator
    1.Array
        const a = [1,2,3]
        const b= [4,5,6]
        const c = [...a,...b]  //1,2,3,4,5,6
    2.Objetos
        const foo = {id:1,name:'pedro'}
        const bar = {name:'pedro hurtado'}
        const result = {...foo,...bar}  //name=pedro hurtado
        const result1 = {...bar,...foo}  //name=pedro


        const foo = {id:1,name:'pedro',bar={id:1}}
        const result = {...foo}
        result.id = 55
        result.bar.id=44

        console.log(foo.id) //1
        console.log(foo.bar.id) //44

        const bar1 = {...foo.bar}
        const result = {...foo, ...bar1}
        result = structuredClone(foo)

        invocación a las funciones
        fun(...foo)
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Spread_syntax
        https://developer.mozilla.org/en-US/docs/Web/API/Window/structuredClone

5. Operador de cortocircuito

    //and
    if(foo.write!==undefined){
        foo.write()
    }
    foo.write && foo.write()
    //or
    const defaultOptions = {}
    constructor(options){
        this.options = options || defaultOptions
    }


6. Operador Ternario
    const b=(a>5)?"Si":"No"
7. Optional Chainging
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Optional_chaining
    foo.write?()
8. Nullish Coalescing
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing
9. Nullish Coalescing Assignment
    https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Nullish_coalescing_assignment